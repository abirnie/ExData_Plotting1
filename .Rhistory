a <- available.packages()
head(rownames(a), 3)
View(a)
install.packages(ggplot2)
install.packages('ggplot2')
install.packages('devtools')
installed.packages(KernSmooth)
install.packages("kernsmooth")
install.packages('KernSmooth')
library(KernSmooth)
install.packages('swirl')
mydata <- rnorm(100)
sd(mydata)
sd(x = mydata, na.rm = FALSE)
sd(na.rm = FALSE, mydata)
make.power <- function(n) {
pow <- function(x) {
x^n
}
pow
}
cube <- make.power(3)
square <- make.power(2)
cube(3)
square(3)
cube(2)
square(2)
ls(environment(cube))
get("n", environment(cube))
a <- as.Date("1969-12-31")
a
unclass(a)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
f <- function(x) {
g <- function(y) {
y + z
}
z <- 4
x + g(x)
}
z <- 10
f(3)
source('~/Desktop/coursera/data sets/myfirstfunction.R')
?gl
x <- c(rnorm(10), runif(10), rnorm(10, 1))
x
f <- gl(3, 10)
tapply(x, f, mean)
library(datasets)
head(airquality)
s <- split(airquality, airquality$Month)
lapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")]))
sapply(s, function(x) colMeans(x[, c("Ozone", "Solar.R", "Wind")], na.rm = TRUE))
library(datasets)
data(iris)
iris
?iris
lapply(iris$Sepal.Length, mean)
sapply(iris$Sepal.Length, mean)
sapply(iris[, 1],, mean)
sapply(iris[, 1], mean)
tapply(iris$Sepal.Length, mean)
tapply(iris, mean)
tapply(iris, iris$Sepal.Length, mean)
tapply(iris, species, mean)
tapply(iris, "species", mean)
head(iris)
tapply(iris, "Species", mean)
tapply(iris, Species, mean)
tapply(iris, iris$Species, mean)
?tapply
tapply(iris$Sepal.Length, iris$Species, mean)
colMeans(iris)
?apply
apply(iris, 2, mean)
apply(iris, 1, mean)
apply(iris[, 1:4], 2, mean)
library(datasets)
data(mtcars)
?mtcars
apply(mtcars, 2, mean)
sapply(split(mtcars$mpg, mtcars$cyl), mean)
lapply(split(mtcars$hp, mtcars$cyl), mean)
[1]
hp4 <- lapply(split(mtcars$hp, mtcars$cyl)[,1], mean)
hp4 <- lapply(split(mtcars$hp, mtcars$cyl)[,1], mean[, 1])
hp4 <- lapply(split(mtcars$hp, mtcars$cyl), mean[, 1])
hp4 <- lapply(split(mtcars$hp, mtcars$cyl), mean[1])
hp4 <- lapply(split(mtcars$hp, mtcars$cyl), mean)
hp4
hp4 <- lapply(split(mtcars$hp[1], mtcars$cyl), mean)
hp4 <- lapply(split(mtcars$hp[,1], mtcars$cyl), mean)
hp <- split(mtcars, mtcars$hp)
hp
hp4 <- lapply(hp, function(x) colMeans(x[, mtcars$cyl]))
hp4
lapply(split(mtcars$hp, mtcars$cyl), mean)
hp <- lapply(split(mtcars$hp, mtcars$cyl), mean)
hp[1]
absdiff <- (hp[3] - hp[1])
hp4 = hp[3]
hp8 = hp[1]
absdiff = hp4 - hp8
hp4
hp8
a <- hp[1]
b <- hp[3]
a - b
a-b
= a - b
hp <- lapply(split(mtcars$hp, mtcars$cyl[, "4"]), mean)
hp <- lapply(split(mtcars$hp, mtcars$cyl[, 4]), mean)
hp <- lapply(split(mtcars$hp, mtcars$cyl[1]), mean)
hp
hp <- lapply(split(mtcars$hp, mtcars$cyl[, 1]), mean)
head(mtcars)
hp <- lapply(split(mtcars$hp, mtcars$cyl[, 2]), mean)
hp <- lapply(split(mtcars$hp, mtcars$cyl[2]), mean)
hp
hp2 <- lapply(split(mtcars$hp, mtcars$cyl[2]), mean)
hp2
?lapply
hp2 <- lapply(split(mtcars$hp, mtcars$cyl), range)
hp2
hp <- lapply(split(mtcars$hp, mtcars$cyl), mean)
range(hp)
apply(mtcars, 2, mean)
split(mtcars, mtcars$cyl)
lapply(split(mtcars$hp, mtcars$cyl), mean)
sapply(split(mtcars$hp, mtcars$cyl), mean)
hpcyl <- sapply(split(mtcars$hp, mtcars$cyl), mean)
range(hpcyl)
a <- 4
b <- 4
a*b
a * b
hpcyl <- lapply(split(mtcars$hp, mtcars$cyl), mean)
cyl4 <- hpcyl[1]
cyl8 <- hpcyl[3]
cyl8-cyl4
as.numeric(cyl8) <- hpcyl[3]
as.numeric(cyl4) <- hpcyl[1]
as.numeric(cyl4) < - hpcyl[1]
as.numeric(cyl4) <- hpcyl[1]
mean(mtcars$cyl)
lapply(split(mtcars$hp, mtcars$cyl), mean)
a - b
debug(ls)
ls
end()
end
?debug
Q
ls
debug
?inverse()
?inverse
set.seed(1)
rpois(5, 2)
?ppois
?rpois
install.packages("RMySQL")
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
library(RMySQL)
ucscDb <- dbConnect(MySQL(),user="genome", host="genome-mysql.cse.ucsc.edu")
result <- dbGetQuery(ucscDb, "show databases;"); dbDisconnect(ucscDb);
result
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library(rhdf5)
created = h5createFile("example.h5")
created
con = url("http://scholar.google.com/citations?user=HI-I6C0AAAAJ&hl=en")
htmlCode = readLines(con)
close(con)
htmlCode
library(httr)
install.packages("foreign")
library(httr)
oauth_endpoints("github")
myapp <- oauth_app("github", key = "a035ff64aab89d13415b", secret = "b08bbebb8e4dfe7e3fcf701a864b1ca0deb91f12")
github_token = <- oauth2.0_token(oauth_endpoints("github"), myapp)
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(httr)
myapp = oauth_app("github", key = "a035ff64aab89d13415b", secret = "b08bbebb8e4dfe7e3fcf701a864b1ca0deb91f12")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
req
req <- GET("https://api.github.com/users/jtleek/repos/datasharing.git", gtoken)
req
oauth_endpoints("github")
myapp <- oauth_app("github",key = "a035ff64aab89d13415b", secret = "b08bbebb8e4dfe7e3fcf701a864b1ca0deb91f12")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
gtoken <- config(token = github_token)
req <- GET("https://api.github.com/users/jtleek/repos", gtoken)
stop_for_status(req)
content(req)
myapp <- oauth_app("github",
key = "56b637a5baffac62cad9",
secret = "8e107541ae1791259e9987d544ca568633da2ebf")
github_token <- oauth2.0_token(oauth_endpoints("github"), myapp)
library(swirl)
swirl()
end
info()
bye()
swirl()
mydf <- read.csv(path2csv, stringsAsFactors = FALSE)
dim(mydf)
head(mydf)
library(dplyr)
packageVersion("dplyr")
cran <- tbl_df(mydf)
rm("mydf")
cran
?select
select(cran, ip_id, package, country)
5:20
select(cran, r_arch:country)
select(cran, country:r_arch)
cran
select(cran, -time)
select(cran, -5:20)
-5:20
-(5:20)
select(cran, -(5:20))
select(cran, -(X:size))
filter(cran, package == "swirl")
filter(cran, r_version =="3.1.1", country == "US")
?Comparison
filter(cran, r_version <= "3.0.2", country == "IN")
filter(cran, country == "US" | country == "IN")
filter(cran, size > 100500, r_os == "linux-gnu")
is.na(c(3,5,NA,10))
!is.na(c(3,5,NA,10))
filter(cran, !is.na(r_version))
cran2 <- select(cran, ip_id:store)
cran2 <- select(cran, size:ip_id)
arrange(cran2, ip_id)
arrange(cran2, desc(ip_id))
arrange(cran2, package, ip_id)
arrange(cran2, country, desc(r_version), ip_id)
cran3 <- select(cran, ip_id, package, size)
cran3
mutate(cran3, size_mb = size / 2^20)
mutate(cran3, size_mb = size / 2^20, size_gb = size_mb / 2^10)
mutate(cran3, correct_size = size + 1000)
summarize(cran, avg_bytes = mean(size))
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
q
quit
help
library(swirl)
install_from_swirl("Exploratory Data Analysis")
swirl()
swirl()
swirl()
swirl()
library(lattice)
library(datasets)
## Simple scatterplot
xyplot(Ozone ~ Wind, data = airquality)
airquality <- transform(airquality, Month = factor(Month))
xyplot(Ozone ~ Wind | Month, data = airquality, layout = c(5, 1))
set.seed(10)
x <- rnorm(100)
f <- rep(0:1, each = 50)
y <- x + f - f * x + rnorm(100, sd = 0.5)
f <- factor(f, labels = c("Group 1", "Group 2"))
xyplot(y ~ x | f, layout = c(2, 1)) ## Plot with 2 panels
## Custom panel function
xyplot(y ~ x | f, panel = function(x, y, ...) {
panel.xyplot(x, y, ...) ## First call the default panel function for 'xyplot'
panel.abline(h = median(y), lty = 2) ## Add a horizontal line at the median
})
?rep
library(nlme)
library(lattice)
xyplot(weight ~ Time | Diet, BodyWeight)
library(datasets)
data(airquality)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
library(ggplot2)
qplot(Wind, Ozone, data = airquality, facets = . ~ factor(Month))
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
qplot(Wind, Ozone, data = airquality)
qplot(Wind, Ozone, data = airquality, geom = "smooth")
airquality = transform(airquality, Month = factor(Month))
qplot(Wind, Ozone, data = airquality, facets = . ~ Month)
g <- ggplot(movies, aes(votes, rating))
print(g)
qplot(votes, rating, data = movies)
qplot(votes, rating, data = movies) + geom_smooth()
qplot(votes, rating, data = movies) + stats_smooth("loess")
qplot(votes, rating, data = movies, panel = panel.loess)
qplot(votes, rating, data = movies, smooth = "loess")
install.packages("ggplot2")
?hist()
setwd("~/Desktop/coursera/ExData_Plotting1")
# get data
dat <- tbl_df(read.table("household_power_consumption.txt", header=TRUE, sep= ";", na.strings = c("?","")))
# create truncated dataset by subsetting specified dates
data <- filter(dat, Date == "1/2/2007" | Date == "2/2/2007")
# remove dat from environment to free up RAM
rm(dat)
# convert date and time to proper formats
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data$timetemp <- paste(data$Date, data$Time)
data$Time <- strptime(data$timetemp, format = "%Y-%m-%d %H:%M:%S")
# create histogram of global active power
png(file = "plot1.png", width = 480, height = 480)
hist(data$Global_active_power, col = "red", xlab = "Global Active Power", ylab = "Frequency")
dev.off()
# load dplyr package
library(dplyr)
# get data
dat <- tbl_df(read.table("household_power_consumption.txt", header=TRUE, sep= ";", na.strings = c("?","")))
# create truncated dataset by subsetting specified dates
data <- filter(dat, Date == "1/2/2007" | Date == "2/2/2007")
# remove dat from environment to free up RAM
rm(dat)
# convert date and time to proper formats
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data$timetemp <- paste(data$Date, data$Time)
data$Time <- strptime(data$timetemp, format = "%Y-%m-%d %H:%M:%S")
# create histogram of global active power
png(file = "plot1.png", width = 480, height = 480)
hist(data$Global_active_power, col = "red", xlab = "Global Active Power", ylab = "Frequency")
dev.off()
# create histogram of global active power
png(file = "plot1.png", width = 480, height = 480)
hist(data$Global_active_power, col = "red", main = "Global Active Power", xlab = "Global Active Power (kilowatts)", ylab = "Frequency")
dev.off()
# load dplyr package
library(dplyr)
# get data
dat <- tbl_df(read.table("household_power_consumption.txt", header=TRUE, sep= ";", na.strings = c("?","")))
# create truncated dataset by subsetting specified dates
data <- filter(dat, Date == "1/2/2007" | Date == "2/2/2007")
# remove dat from environment to free up RAM
rm(dat)
# convert date and time to proper formats
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data$timetemp <- paste(data$Date, data$Time)
data$Time <- strptime(data$timetemp, format = "%Y-%m-%d %H:%M:%S")
# create line plot across time of global active power
png(file = "plot2.png", width = 480, height = 480)
plot(x = data$Time, y = data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power (kilowatts)")
dev.off()
# load dplyr package
library(dplyr)
# get data
dat <- tbl_df(read.table("household_power_consumption.txt", header=TRUE, sep= ";", na.strings = c("?","")))
# create truncated dataset by subsetting specified dates
data <- filter(dat, Date == "1/2/2007" | Date == "2/2/2007")
# remove dat from environment to free up RAM
rm(dat)
# convert date and time to proper formats
data$Date <- as.Date(data$Date, format = "%d/%m/%Y")
data$timetemp <- paste(data$Date, data$Time)
data$Time <- strptime(data$timetemp, format = "%Y-%m-%d %H:%M:%S")
# create panel of graphs
png(file = "plot4.png", width = 480, height = 480)
par(mfrow = c(2, 2))
with(data, {
plot(x = data$Time, y = data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
plot(x = data$Time, y = data$Voltage, type = "l", xlab = "", ylab = "datetime")
plot(x = data$Time, y = data$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
lines(x = data$Time, y = data$Sub_metering_2, type = "l", col = "red")
lines(x = data$Time, y = data$Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(x = data$Time, y = data$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
})
dev.off()
# create panel of graphs
png(file = "plot4.png", width = 480, height = 480)
par(mfrow = c(2, 2))
with(data, {
plot(x = data$Time, y = data$Global_active_power, type = "l", xlab = "", ylab = "Global Active Power")
plot(x = data$Time, y = data$Voltage, type = "l", xlab = "datetime", ylab = "Voltage")
plot(x = data$Time, y = data$Sub_metering_1, type = "l", xlab = "", ylab = "Energy sub metering")
lines(x = data$Time, y = data$Sub_metering_2, type = "l", col = "red")
lines(x = data$Time, y = data$Sub_metering_3, type = "l", col = "blue")
legend("topright", lty = 1, col = c("black", "red", "blue"), legend = c("Sub_metering_1", "Sub_metering_2", "Sub_metering_3"))
plot(x = data$Time, y = data$Global_reactive_power, type = "l", xlab = "datetime", ylab = "Global_reactive_power")
})
dev.off()
